// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import StructuralCore

% for N in range(1, 17):

public struct Point${N}: Equatable, Hashable, Codable {
    
    % for i in range(1, N + 1):
    public var _${i}: Float
    % end 

    public init(
    % for i in range(1, N + 1):
        _${i}: Float
    % if i != N:
        ,
    % end
    % end
    ) {
        % for i in range(1, N + 1):
        self._${i} = _${i}
        % end
    }

}

extension Point${N}: Structural {
    // swift-format-ignore
    public typealias StructuralRepresentation =
        StructuralStruct<
            Point${N},
            % for i in range(1, N + 1):
            StructuralCons<StructuralProperty<Point${N}, Float>, 
            % end
            StructuralEmpty
            % for i in range(1, N + 1):
            >
            % end
        >

    // swift-format-ignore
    public var structuralRepresentation: StructuralRepresentation {
        get {
            return StructuralStruct(Point${N}.self, 
                % for i in range(1, N + 1):
                StructuralCons(StructuralProperty<Point${N}, Float>("_${i}", _${i}, isMutable: true),
                % end 
                StructuralEmpty()
                % for i in range(1, N + 1):
                )
                % end
            )
	}
	set {
	    % for i in range(1, N + 1):
	    self._${i} =
                newValue.properties
		% for j in range(i - 1):
		.next
		% end
		.value
		.value
	    % end
	}
    }

    public init(structuralRepresentation: StructuralRepresentation) {
        % for i in range(1, N + 1):
        self._${i} =
            structuralRepresentation.properties
            % for j in range(i - 1):
            .next
            % end
            .value
            .value
        % end
    }
}

extension Point${N}: CustomEquatable {}
extension Point${N}: CustomHashable {}
extension Point${N}: Zero {}
extension Point${N}: Additive {}
extension Point${N}: CustomDebugString {}
extension Point${N}: CustomComparable {}
extension Point${N}: InplaceAdd {}
extension Point${N}: EncodeJSON {}
extension Point${N}: DecodeJSON {}
extension Point${N}: DefaultInitializable {}

% end
